import pygame
import time
import random
import numpy as np

class SnakeGame:
    def __init__(self, window_size=(300, 300), snake_speed=15, num_fruits=3):
        self.window_x, self.window_y = window_size
        self.snake_speed = snake_speed
        self.num_fruits = num_fruits

        self.black = pygame.Color(0, 0, 0)
        self.white = pygame.Color(255, 255, 255)
        self.red = pygame.Color(255, 0, 0)
        self.green = pygame.Color(0, 255, 0)

        pygame.init()
        pygame.display.set_caption('Snake Game with Q-Learning Agent')
        self.game_window = pygame.display.set_mode((self.window_x, self.window_y))
        self.fps = pygame.time.Clock()

        self.q_table = np.zeros((self.window_x // 10, self.window_y // 10, 4))
        self.learning_rate = 0.1
        self.discount_factor = 0.9
        self.exploration_rate = 1.0
        self.exploration_decay = 0.001

        self.reset_game()

    def reset_game(self):
        self.snake_position = [100, 50]
        self.snake_body = [[100, 50], [90, 50], [80, 50], [70, 50]]
        self.fruit_positions = [self.spawn_fruit() for _ in range(self.num_fruits)]
        self.direction = 'RIGHT'
        self.score = 0

    def spawn_fruit(self):
        return [random.randrange(1, (self.window_x // 10)) * 10,
                random.randrange(1, (self.window_y // 10)) * 10]

    def show_score(self, font='times new roman', size=20):
        score_font = pygame.font.SysFont(font, size)
        score_surface = score_font.render(f'Score : {self.score}', True, self.white)
        score_rect = score_surface.get_rect()
        self.game_window.blit(score_surface, score_rect)

    def game_over(self):
        time.sleep(2)
        self.reset_game()

    def process_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

    def choose_action(self, state):
        if random.random() < self.exploration_rate:
            return random.randint(0, 3)  # Explore
        else:
            x, y = state
            return np.argmax(self.q_table[x][y])  # Exploit

    def update_direction(self, action):
        if action == 0 and self.direction != 'DOWN':
            self.direction = 'UP'
        elif action == 1 and self.direction != 'UP':
            self.direction = 'DOWN'
        elif action == 2 and self.direction != 'RIGHT':
            self.direction = 'LEFT'
        elif action == 3 and self.direction != 'LEFT':
            self.direction = 'RIGHT'

    def update_snake_position(self):
        if self.direction == 'UP':
            self.snake_position[1] -= 10
        elif self.direction == 'DOWN':
            self.snake_position[1] += 10
        elif self.direction == 'LEFT':
            self.snake_position[0] -= 10
        elif self.direction == 'RIGHT':
            self.snake_position[0] += 10

    def reward(self, state, next_state):
        if self.snake_position in self.fruit_positions:
            return 10
        elif (self.snake_position[0] < 0 or self.snake_position[1] < 0 or
              self.snake_position[0] >= self.window_x or self.snake_position[1] >= self.window_y or
              self.snake_position in self.snake_body[1:]):
            return -100
        else:
            return -1

    def update_q_table(self, state, action, reward, next_state):
        x, y = state
        next_x, next_y = next_state
        max_future_q = np.max(self.q_table[next_x][next_y])
        current_q = self.q_table[x][y][action]
        new_q = current_q + self.learning_rate * (reward + self.discount_factor * max_future_q - current_q)
        self.q_table[x][y][action] = new_q
        if self.exploration_rate > 0.01:
            self.exploration_rate -= self.exploration_decay

    def run(self):
        while True:
            self.process_events()
            state = (self.snake_position[0] // 10, self.snake_position[1] // 10)
            action = self.choose_action(state)
            self.update_direction(action)
            prev_position = self.snake_position[:]
            self.update_snake_position()
            next_state = (self.snake_position[0] // 10, self.snake_position[1] // 10)

            reward = self.reward(state, next_state)
            self.update_q_table(state, action, reward, next_state)

            if reward == -100:
                self.game_over()
                continue

            self.snake_body.insert(0, list(self.snake_position))
            if self.snake_position in self.fruit_positions:
                self.score += 10
                self.fruit_positions.remove(self.snake_position)
                self.fruit_positions.append(self.spawn_fruit())
            else:
                self.snake_body.pop()

            self.game_window.fill(self.black)
            for pos in self.snake_body:
                pygame.draw.rect(self.game_window, self.green, pygame.Rect(pos[0], pos[1], 10, 10))
            for fruit in self.fruit_positions:
                pygame.draw.rect(self.game_window, self.red, pygame.Rect(fruit[0], fruit[1], 10, 10))
            self.show_score()
            pygame.display.update()
            self.fps.tick(self.snake_speed)

if __name__ == '__main__':
    game = SnakeGame()
    game.run()
